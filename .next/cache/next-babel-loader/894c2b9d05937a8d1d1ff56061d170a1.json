{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport cookie from 'js-cookie';\nimport { API } from '../config';\nimport Router from 'next/router';\nexport const handleResponse = response => {\n  if (response.status === 401) {\n    signout(() => {\n      Router.push({\n        pathname: '/signin',\n        query: {\n          message: 'Your session is expired, Please signin'\n        }\n      });\n    });\n  } else {\n    return;\n  }\n};\nexport const preSignup = user => {\n  return fetch(`${API}/pre-signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signup = user => {\n  return fetch(`${API}/signup`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signin = user => {\n  return fetch(`${API}/signin`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const signout = next => {\n  removeCookie('token');\n  removeLocalStorage('user');\n  next();\n  return fetch(`${API}/signout`, {\n    metod: 'GET'\n  }).then(response => {\n    console.log('signout successful');\n  }).catch(err => console.log(err));\n}; // set cookie\n\nexport const setCookie = (key, value) => {\n  if (false) {\n    cookie.set(key, value, {\n      expires: 1\n    });\n  }\n};\nexport const removeCookie = key => {\n  if (false) {\n    cookie.remove(key, {\n      expires: 1\n    });\n  }\n}; // get cookie\n\nexport const getCookie = key => {\n  if (false) {\n    return cookie.get(key);\n  }\n}; // localstorage\n\nexport const setLocalStorage = (key, value) => {\n  if (false) {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n};\nexport const removeLocalStorage = key => {\n  if (false) {\n    localStorage.removeItem(key);\n  }\n}; // authenticate user by passing data to cookie and localstorage\n\nexport const authenticate = (data, next) => {\n  setCookie('token', data.token);\n  setLocalStorage('user', data.user);\n  next();\n};\nexport const isAuth = () => {\n  if (false) {\n    const cookieChecked = getCookie('token');\n\n    if (cookieChecked) {\n      if (localStorage.getItem('user')) {\n        return JSON.parse(localStorage.getItem('user'));\n      } else {\n        return false;\n      }\n    }\n  }\n};\nexport const forgotPassword = email => {\n  return fetch(`${API}/forgot-password`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(email)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\nexport const resetPassword = resetInfo => {\n  return fetch(`${API}/reset-password`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(resetInfo)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"sources":["C:/Users/malac/OneDrive/שולחן העבודה/My Stuff/Programming/My Projects/shopping-list/frontend/actions/auth.js"],"names":["fetch","cookie","API","Router","handleResponse","response","status","signout","push","pathname","query","message","preSignup","user","method","headers","Accept","body","JSON","stringify","then","json","catch","err","console","log","signup","signin","next","removeCookie","removeLocalStorage","metod","setCookie","key","value","set","expires","remove","getCookie","get","setLocalStorage","localStorage","setItem","removeItem","authenticate","data","token","isAuth","cookieChecked","getItem","parse","forgotPassword","email","resetPassword","resetInfo"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,MAAMC,cAAc,GAAGC,QAAQ,IAAI;AACtC,MAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AACxBC,IAAAA,OAAO,CAAC,MAAM;AACVJ,MAAAA,MAAM,CAACK,IAAP,CAAY;AACRC,QAAAA,QAAQ,EAAE,SADF;AAERC,QAAAA,KAAK,EAAE;AACHC,UAAAA,OAAO,EAAE;AADN;AAFC,OAAZ;AAMH,KAPM,CAAP;AAQH,GATD,MASO;AACH;AACH;AACJ,CAbM;AAeP,OAAO,MAAMC,SAAS,GAAGC,IAAI,IAAI;AAChC,SAAOb,KAAK,CAAE,GAAEE,GAAI,aAAR,EAAsB;AAC3BY,IAAAA,MAAM,EAAE,MADmB;AAE3BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFkB;AAM3BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANqB,GAAtB,CAAL,CAQHO,IARG,CAQEf,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACgB,IAAT,EAAP;AACH,GAVG,EAWHC,KAXG,CAWGC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXV,CAAP;AAYA,CAbM;AAeP,OAAO,MAAMG,MAAM,GAAGb,IAAI,IAAI;AAC1B,SAAOb,KAAK,CAAE,GAAEE,GAAI,SAAR,EAAkB;AAC1BY,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFiB;AAM1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANoB,GAAlB,CAAL,CAQNO,IARM,CAQDf,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACgB,IAAT,EAAP;AACH,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXP,CAAP;AAYH,CAbM;AAeP,OAAO,MAAMI,MAAM,GAAGd,IAAI,IAAI;AAC1B,SAAOb,KAAK,CAAE,GAAEE,GAAI,SAAR,EAAkB;AAC1BY,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFiB;AAM1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AANoB,GAAlB,CAAL,CAQNO,IARM,CAQDf,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACgB,IAAT,EAAP;AACH,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXP,CAAP;AAYH,CAbM;AAeP,OAAO,MAAMhB,OAAO,GAAGqB,IAAI,IAAI;AAC3BC,EAAAA,YAAY,CAAC,OAAD,CAAZ;AACAC,EAAAA,kBAAkB,CAAC,MAAD,CAAlB;AACAF,EAAAA,IAAI;AAEJ,SAAO5B,KAAK,CAAE,GAAEE,GAAI,UAAR,EAAmB;AAC3B6B,IAAAA,KAAK,EAAE;AADoB,GAAnB,CAAL,CAGNX,IAHM,CAGDf,QAAQ,IAAI;AACdmB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,GALM,EAMNH,KANM,CAMAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CANP,CAAP;AAOH,CAZM,C,CAcP;;AACA,OAAO,MAAMS,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrC,aAAoB;AAChBjC,IAAAA,MAAM,CAACkC,GAAP,CAAWF,GAAX,EAAgBC,KAAhB,EAAuB;AACnBE,MAAAA,OAAO,EAAE;AADU,KAAvB;AAGH;AACJ,CANM;AAQP,OAAO,MAAMP,YAAY,GAAGI,GAAG,IAAI;AAC/B,aAAoB;AAChBhC,IAAAA,MAAM,CAACoC,MAAP,CAAcJ,GAAd,EAAmB;AACfG,MAAAA,OAAO,EAAE;AADM,KAAnB;AAGH;AACJ,CANM,C,CAQP;;AACA,OAAO,MAAME,SAAS,GAAGL,GAAG,IAAI;AAC5B,aAAoB;AAChB,WAAOhC,MAAM,CAACsC,GAAP,CAAWN,GAAX,CAAP;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,MAAMO,eAAe,GAAG,CAACP,GAAD,EAAMC,KAAN,KAAgB;AAC3C,aAAoB;AAChBO,IAAAA,YAAY,CAACC,OAAb,CAAqBT,GAArB,EAA0Bf,IAAI,CAACC,SAAL,CAAee,KAAf,CAA1B;AACH;AACJ,CAJM;AAMP,OAAO,MAAMJ,kBAAkB,GAAGG,GAAG,IAAI;AACrC,aAAoB;AAChBQ,IAAAA,YAAY,CAACE,UAAb,CAAwBV,GAAxB;AACH;AACJ,CAJM,C,CAMP;;AACA,OAAO,MAAMW,YAAY,GAAG,CAACC,IAAD,EAAOjB,IAAP,KAAgB;AACxCI,EAAAA,SAAS,CAAC,OAAD,EAAUa,IAAI,CAACC,KAAf,CAAT;AACAN,EAAAA,eAAe,CAAC,MAAD,EAASK,IAAI,CAAChC,IAAd,CAAf;AACAe,EAAAA,IAAI;AACP,CAJM;AAMP,OAAO,MAAMmB,MAAM,GAAG,MAAM;AACxB,aAAoB;AAChB,UAAMC,aAAa,GAAGV,SAAS,CAAC,OAAD,CAA/B;;AACA,QAAGU,aAAH,EAAkB;AACd,UAAGP,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAH,EAAiC;AAC7B,eAAO/B,IAAI,CAACgC,KAAL,CAAWT,YAAY,CAACQ,OAAb,CAAqB,MAArB,CAAX,CAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ;AACJ;AACJ,CAXM;AAaP,OAAO,MAAME,cAAc,GAAGC,KAAK,IAAI;AACnC,SAAOpD,KAAK,CAAE,GAAEE,GAAI,kBAAR,EAA2B;AACnCY,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAF0B;AAMnCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeiC,KAAf;AAN6B,GAA3B,CAAL,CAQNhC,IARM,CAQDf,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACgB,IAAT,EAAP;AACH,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXP,CAAP;AAYH,CAbM;AAeP,OAAO,MAAM8B,aAAa,GAAGC,SAAS,IAAI;AACtC,SAAOtD,KAAK,CAAE,GAAEE,GAAI,iBAAR,EAA0B;AAClCY,IAAAA,MAAM,EAAE,KAD0B;AAElCC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFyB;AAMlCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAemC,SAAf;AAN4B,GAA1B,CAAL,CAQNlC,IARM,CAQDf,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACgB,IAAT,EAAP;AACH,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXP,CAAP;AAYH,CAbM","sourcesContent":["import fetch from 'isomorphic-fetch';\r\nimport cookie from 'js-cookie';\r\nimport { API } from '../config';\r\nimport Router from 'next/router';\r\n\r\nexport const handleResponse = response => {\r\n    if(response.status === 401) {\r\n        signout(() => {\r\n            Router.push({\r\n                pathname: '/signin',\r\n                query: {\r\n                    message: 'Your session is expired, Please signin'\r\n                }\r\n            });\r\n        });   \r\n    } else {\r\n        return;\r\n    }\r\n};\r\n\r\nexport const preSignup = user => {\r\n\treturn fetch(`${API}/pre-signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\nexport const signup = user => {\r\n    return fetch(`${API}/signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\nexport const signin = user => {\r\n    return fetch(`${API}/signin`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\nexport const signout = next => {\r\n    removeCookie('token');\r\n    removeLocalStorage('user');\r\n    next();\r\n\r\n    return fetch(`${API}/signout`, {\r\n        metod: 'GET'\r\n    })\r\n    .then(response => {\r\n        console.log('signout successful');\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\n// set cookie\r\nexport const setCookie = (key, value) => {\r\n    if(process.browser) {\r\n        cookie.set(key, value, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n\r\nexport const removeCookie = key => {\r\n    if(process.browser) {\r\n        cookie.remove(key, {\r\n            expires: 1\r\n        });\r\n    }\r\n};\r\n\r\n// get cookie\r\nexport const getCookie = key => {\r\n    if(process.browser) {\r\n        return cookie.get(key);\r\n    }\r\n};\r\n\r\n// localstorage\r\nexport const setLocalStorage = (key, value) => {\r\n    if(process.browser) {\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n};\r\n\r\nexport const removeLocalStorage = key => {\r\n    if(process.browser) {\r\n        localStorage.removeItem(key);\r\n    }\r\n};\r\n\r\n// authenticate user by passing data to cookie and localstorage\r\nexport const authenticate = (data, next) => {\r\n    setCookie('token', data.token);\r\n    setLocalStorage('user', data.user);\r\n    next();\r\n};\r\n\r\nexport const isAuth = () => {\r\n    if(process.browser) {\r\n        const cookieChecked = getCookie('token');\r\n        if(cookieChecked) {\r\n            if(localStorage.getItem('user')) {\r\n                return JSON.parse(localStorage.getItem('user'));\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const forgotPassword = email => {\r\n    return fetch(`${API}/forgot-password`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(email)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err));\r\n};\r\n\r\nexport const resetPassword = resetInfo => {\r\n    return fetch(`${API}/reset-password`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(resetInfo)\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err));\r\n};"]},"metadata":{},"sourceType":"module"}