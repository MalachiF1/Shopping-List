{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malac\\\\OneDrive\\\\\\u05E9\\u05D5\\u05DC\\u05D7\\u05DF \\u05D4\\u05E2\\u05D1\\u05D5\\u05D3\\u05D4\\\\My Stuff\\\\Programming\\\\My Projects\\\\shopping-list\\\\frontend\\\\pages\\\\auth\\\\password\\\\reset\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport Layout from '../../../../components/Layout';\nimport { withRouter } from 'next/router';\nimport { resetPassword } from '../../../../actions/auth';\n\nconst ResetPassword = ({\n  router\n}) => {\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name: '',\n    newPassword: '',\n    error: '',\n    message: '',\n    showForm: true\n  });\n  const {\n    showForm,\n    name,\n    newPassword,\n    error,\n    message\n  } = values;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    resetPassword({\n      newPassword,\n      resetPasswordLink: router.query.id\n    }).then(data => {\n      if (data.error) {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          error: data.error,\n          showForm: true,\n          newPassword: ''\n        }));\n      } else {\n        setValues(_objectSpread(_objectSpread({}, values), {}, {\n          message: data.message,\n          showForm: false,\n          newPassword: '',\n          error: false\n        }));\n      }\n    });\n  };\n\n  const passwordResetForm = () => __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"form-group pt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"password\",\n    onChange: e => setValues(_objectSpread(_objectSpread({}, values), {}, {\n      newPassword: e.target.value\n    })),\n    className: \"form-control\",\n    value: newPassword,\n    placeholder: \"Type new password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, \"Change Password\"))));\n\n  const showError = () => error ? __jsx(\"div\", {\n    className: \"alert alert-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 38\n    }\n  }, error) : '';\n\n  const showMessage = () => message ? __jsx(\"div\", {\n    className: \"alert alert-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 42\n    }\n  }, message) : '';\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, \"Reset Password\"), __jsx(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }), showError(), showMessage(), showForm && passwordResetForm()));\n};\n\nexport default withRouter(ResetPassword);","map":{"version":3,"sources":["C:/Users/malac/OneDrive/שולחן העבודה/My Stuff/Programming/My Projects/shopping-list/frontend/pages/auth/password/reset/[id].js"],"names":["useState","Layout","withRouter","resetPassword","ResetPassword","router","values","setValues","name","newPassword","error","message","showForm","handleSubmit","e","preventDefault","resetPasswordLink","query","id","then","data","passwordResetForm","target","value","showError","showMessage"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport Layout from '../../../../components/Layout';\r\nimport { withRouter } from 'next/router';\r\nimport { resetPassword } from '../../../../actions/auth';\r\n\r\nconst ResetPassword = ({ router }) => {\r\n    const [values, setValues] = useState({\r\n        name: '',\r\n        newPassword: '',\r\n        error: '',\r\n        message: '',\r\n        showForm: true\r\n    });\r\n\r\n    const { showForm, name, newPassword, error, message } = values;\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        resetPassword({\r\n            newPassword,\r\n            resetPasswordLink: router.query.id\r\n        }).then(data => {\r\n            if(data.error) {\r\n                setValues({ ...values, error: data.error, showForm: true, newPassword: '' });\r\n            } else {\r\n                setValues({ ...values, message: data.message, showForm: false, newPassword: '', error: false });\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    const passwordResetForm = () => (\r\n        <div className='container'>\r\n            <form onSubmit={handleSubmit}>\r\n                <div className='form-group pt-5'>\r\n                    <input \r\n                        type='password' \r\n                        onChange={e => setValues({ ...values, newPassword: e.target.value })} \r\n                        className='form-control' \r\n                        value={newPassword} \r\n                        placeholder=\"Type new password\" \r\n                        required \r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button className='btn btn-primary'>Change Password</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n\r\n    const showError = () => (error ? <div className='alert alert-danger'>{error}</div> : '');\r\n    const showMessage = () => (message ? <div className='alert alert-success'>{message}</div> : '');\r\n\r\n    return (\r\n        <Layout>\r\n            <div className='container'>\r\n                <h2>Reset Password</h2>\r\n                <hr />\r\n                {showError()}\r\n                {showMessage()}\r\n                {showForm && passwordResetForm()}\r\n            </div>\r\n        </Layout>\r\n    );\r\n\r\n};\r\n\r\nexport default withRouter(ResetPassword);"]},"metadata":{},"sourceType":"module"}